/** @constructor */var DcHelper = function() {    this.printMode = "console";};DcHelper.prototype.init = function() {    Number.prototype.padZeros = function(places) {        var dif = places - String(this.toFixed(0)).length;        if (dif <= 0) {            return this;        }        var pad = (new Array(dif + 1)).join(0);        return pad + String(this);    }};DcHelper.prototype.getTimestamp = function() {    var d = new Date();    var dcomp = {        dd: d.getDate(),        mm: d.getMonth() + 1,        yy: d.getYear() + 1900,        hh: d.getHours(),        mm: d.getMinutes(),        ss: d.getSeconds()    }    for (var prop in dcomp) {        if (!dcomp.hasOwnProperty(prop)) {            continue;        }        dcomp[prop] = String(dcomp[prop].padZeros(2));    }    return dcomp.yy + "-" + dcomp.mm + "-" + dcomp.dd + " " + dcomp.hh +        ":" + dcomp.mm + ":" + dcomp.ss;};DcHelper.prototype.setPrintModeConsole = function() {    return this.printMode = "console";};DcHelper.prototype.setPrintModeAlert = function() {    return this.printMode = "alert";};DcHelper.prototype.print = function(msg, title) {    msg = msg || "No message provided."    title = title || "DcHelper Message:"    switch (this.printMode) {        case "console":            this.printToConsole(msg, title);            break;        case "alert":            this.printToAlert(msg, title);            break;        default:            this.printToAlert(msg, title);            break;    }};DcHelper.prototype.printToConsole = function(msg, title) {    $.writeln(title + this.getTimestamp());    $.writeln(msg);    $.writeln("");    return 1;};DcHelper.prototype.printToAlert = function(msg, title) {    return alert(msg + "(" + this.getTimestamp() + ")", title);};DcHelper.prototype.clearEstkConsole = function() {    if (app.name === "ExtendScript Toolkit") {        app.clc();    } else {        var estApp = BridgeTalk.getSpecifier("estoolkit");        if (estApp) {            var bt = new BridgeTalk;            bt.target = estApp;            bt.body = "app.clc()";            bt.send();        }    }};DcHelper.prototype.readFile = function(path) {    var f = new File(path);    if (!f.exists) {        // ## ERROR        this.print("Cannot find file at " + path +            ". Please verify that it exists and can be read.");        return false;    } else {        if (f.open("r")) {            var data = f.read();            f.close();            return data;        } else {            // ## ERROR            this.print("File at " + file.fsName + " cannot be read.");        }    }};DcHelper.prototype.writeFile = function(name, path, content, encoding) {    name = name || "myfile"    path = path || "";    content = content || "";    encoding = encoding || "UTF-8";    if (name.indexOf(".") == -1) {        this.print("Provided file name \"" + name + "\" did not specify an extension. File will still be attempted to be written.");    }    var f = new File(path + "/" + name);    if (f.open("w")) {        f.encoding = encoding;        f.write(content);        f.close();    } else {        // ## ERROR        return this.print("Can't make a file at " + path +            ". Please make sure it's a valid location.");    }    return f;};